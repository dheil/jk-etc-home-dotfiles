# Modeline and Notes {
# vim: set sw=2 ts=2 sts=2 et tw=79 fmr={,} fdm=marker:

# tmux configuration file
# (c) 2014-2015 Joerg Kuetemeier <jk@kuetemeier.net>

# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# }

# Bind prefix key to C-a {

  # C-b is used by vim
  unbind-key C-b
  set-option -g prefix C-a
  unbind-key C-b
  bind-key C-a send-prefix

# }

# Basic settings {

  # Set terminal to a 256 color version {
    set -g default-terminal "screen-256color"
  # }

  # Base index for windows to 1 instead of 0
  set -g base-index 1

  # base index for panes to 1 instead of 0
  set -g pane-base-index 1

  # Allows for faster key repetition
  set -s escape-time 0

  # Allows us to use C-a a <command> to send commands to a TMUX session inside
  # another TMUX session
  bind-key a send-prefix

  # xterm-style function key sequences
  setw -g xterm-keys on

  # Display all clients
  bind-key * list-clients

  # amount of time for which status line messages and other indicators
  # are displayed. time is in milliseconds.
  set -g display-time 2000

  # Quick quit tmux server
  bind-key Q confirm-before kill-server

  # Scrollback buffer n lines
  set -g history-limit 30000

  # Reload config
  bind r source-file ~/.tmux.conf \; display-message "Config reloaded..."

# }

# Copy and Paste {

  # source: http://dudenbostel.leanside.com/2014/01/copy-paste-in-tmux/
  #
  # Cheat-Sheet:
  #
  # Y to yank the current line, which is what ^1 does.
  #
  # In copy-mode you can jump around with almost all the commands that work in vim. / and ? work to search. There are no motions, so you can’t y5w or yap.
  #
  # Once you’ve copied some stuff, you can do more than just paste the last thing:
  #
  #   #    List all paste buffers.
  #   -    Delete the most recently copied buffer of text.
  #   =    Choose which buffer to paste interactively from a list.
  #   Esc  Enter copy mode to copy text or view the history.
  #   p    Paste the most recently copied buffer of text.

  setw -g mode-keys vi # vim-style movement

  # in normal tmux mode
  bind Escape copy-mode # `tmux prefix + Escape` starts copy mode.
  bind p paste-buffer # `prefix + p` pastes the latest buffer

  # in copy mode…
  bind -t vi-copy v begin-selection # `v` begins a selection. (movement keys to select the desired bits)
  bind -t vi-copy y copy-selection # `y` copies the current selection to one of tmux's "paste buffers"
  bind -t vi-copy V rectangle-toggle # `V` changes between line- and columnwise selection

  bind -t vi-copy Y copy-end-of-line # ^1
  bind + delete-buffer

# }

# Pane traversal and resizing {

  # pane traversal
  bind h select-pane -L
  bind j select-pane -D
  bind k select-pane -U
  bind l select-pane -R

  # pane resizing
  bind -r H resize-pane -L 5
  bind -r J resize-pane -D 6
  bind -r K resize-pane -U 5
  bind -r L resize-pane -R 5

  bind-key M-7 resize-pane -t 1 -x 90
  bind-key M-8 resize-pane -t 1 -x 60
  bind-key M-9 resize-pane -t 1 -x 30
  bind-key M-0 resize-pane -t 0 -x 30

# }

# Theme {

  # Source:
  # https://github.com/ryankuczka/dotfiles/blob/master/zsh/themes/lucius.tmux-theme
  #
  # Set colors and styles
  set -g status "on"
  set -g status-utf8 "on"
  set -g status-justify "left"
  set -g status-style "bg=colour236,none"

  set -g message-style "fg=colour250,bg=colour236"
  set -g message-command-style "fg=colour250,bg=colour236"
  set -g pane-border-style "fg=colour236"
  set -g pane-active-border-style "fg=colour67"

  set -g status-left "#[fg=colour236,bg=colour67,bold] #S #[fg=colour67,bg=colour236,nobold,nounderscore,noitalics]"
  set -g status-left-style "none"
  set -g status-left-length "100"
  set -g status-right "#[fg=colour239,bg=colour236,nobold,nounderscore,noitalics]#[fg=colour250,bg=colour239] %Y-%m-%d  %H:%M #[fg=colour67,bg=colour239,nobold,nounderscore,noitalics]#[fg=colour236,bg=colour67] #h "
  set -g status-right-style "none"
  set -g status-right-length "100"

  setw -g window-status-activity-attr "none"
  setw -g window-status-activity-style "fg=colour1,bg=colour236,none"
  setw -g window-status-separator ""
  setw -g window-status-style "fg=colour250,bg=colour236,none"
  setw -g window-status-format "#[fg=colour250,bg=colour236] #I  #W "
  setw -g window-status-current-format "#[fg=colour236,bg=colour239,nobold,nounderscore,noitalics]#[fg=colour250,bg=colour239] #I  #W #[fg=colour239,bg=colour236,nobold,nounderscore,noitalics]"

# }

# Logging {
# source: http://blog.matchgenius.com/tmux-practical-tips/

  bind-key M-H pipe-pane 'cat >>$HOME/tmux-#W.log' \; display-message 'Started logging to $HOME/tmux-#W.log'
  bind-key M-h pipe-pane \; display-message 'Ended logging to $HOME/tmux-#W.log'

# }

# Windows {

  # use C-h and Cl to cycle thru windows {
    bind -r C-h select-window -t :-
    bind -r C-l select-window -t :+
    bind -r Space select-window -t :+
  # }

  # make the current window the first window {
    bind T swap-window -t 1
  # }

  # listen for activity on all windows {
    set -g bell-action any
  # }

  # set window notifications {
    setw -g monitor-activity on
    set -g visual-activity on
  # }

  # enable wm window titles {
    set-option -g set-titles on
  # }

  # wm window title string (uses statusbar variables) {
    set-option -g set-titles-string '#S:#I.#P #W' # window number,program name,active (or not)
  # }

  # control automatic window renaming {
    set-window-option -g automatic-rename on # auto name
  # }

  # New window with default path set to last path {
    bind '"' split-window -c "#{pane_current_path}"
    bind % split-window -h -c "#{pane_current_path}"
    bind c new-window -c "#{pane_current_path}"
  # }

# }

# Mouse support in Tmux {

  # Default: mouse enabled {
    set -g mode-mouse on
    set -g mouse-resize-pane on
    set -g mouse-select-pane on
    set -g mouse-select-window on
  # }

  # Toggle mouse on with ^a m {
    bind m \
      set -g mode-mouse on \;\
      set -g mouse-resize-pane on \;\
      set -g mouse-select-pane on \;\
      set -g mouse-select-window on \;\
      display 'Mouse: ON'
  # }

  # Toggle mouse off with ^a M {
    bind M \
      set -g mode-mouse off \;\
      set -g mouse-resize-pane off \;\
      set -g mouse-select-pane off \;\
      set -g mouse-select-window off \;\
      display 'Mouse: OFF'
  # }

# }

# Mac OS X configuration {

  if-shell 'test "$(uname)" = "Darwin"' 'source ~/.tmux-osx.conf'

# }

# Fork and Local configuration {

  if-shell 'test -e ~/.tmux.fork.conf' 'source ~/.tmux.fork.conf'
  if-shell 'test -e ~/.tmux.local.conf' 'source ~/.tmux.local.conf'

# }
